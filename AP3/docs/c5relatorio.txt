Primeira saída do valgrind:

==1711123== Memcheck, a memory error detector
==1711123== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==1711123== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==1711123== Command: ./a.out
==1711123==
intArray[53]: 53
==1711123==
==1711123== HEAP SUMMARY:
==1711123==     in use at exit: 4,000 bytes in 1 blocks
==1711123==   total heap usage: 2 allocs, 1 frees, 5,024 bytes allocated
==1711123==
==1711123== 4,000 bytes in 1 blocks are definitely lost in loss record 1 of 1
==1711123==    at 0x4841888: malloc (vg_replace_malloc.c:393)
==1711123==    by 0x109193: main (c5.c:9)
==1711123==
==1711123== LEAK SUMMARY:
==1711123==    definitely lost: 4,000 bytes in 1 blocks
==1711123==    indirectly lost: 0 bytes in 0 blocks
==1711123==      possibly lost: 0 bytes in 0 blocks
==1711123==    still reachable: 0 bytes in 0 blocks
==1711123==         suppressed: 0 bytes in 0 blocks
==1711123==
==1711123== For lists of detected and suppressed errors, rerun with: -s
==1711123== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

A resposta disso já estava como comentário no código: "end without freeing!".
Após dar free no ponteiro intArray a saída do valgrind foi essa:

==1734214== Memcheck, a memory error detector
==1734214== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==1734214== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==1734214== Command: ./a.out
==1734214==
intArray[104]: 104
==1734214==
==1734214== HEAP SUMMARY:
==1734214==     in use at exit: 0 bytes in 0 blocks
==1734214==   total heap usage: 2 allocs, 2 frees, 5,024 bytes allocated
==1734214==
==1734214== All heap blocks were freed -- no leaks are possible
==1734214==
==1734214== For lists of detected and suppressed errors, rerun with: -s
==1734214== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
