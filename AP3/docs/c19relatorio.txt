Primeiro output do valgrind:

==2391801== Memcheck, a memory error detector
==2391801== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==2391801== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==2391801== Command: ./a.out
==2391801==
enter a number:
1
==2391801== Invalid write of size 2
==2391801==    at 0x484BB23: memmove (vg_replace_strmem.c:1398)
==2391801==    by 0x48CD828: __printf_buffer_write (Xprintf_buffer_write.c:39)
==2391801==    by 0x48D5349: __printf_buffer (vfprintf-internal.c:647)
==2391801==    by 0x48F08C1: __vsprintf_internal (iovsprintf.c:62)
==2391801==    by 0x48D2914: sprintf (sprintf.c:30)
==2391801==    by 0x10923D: printSum (c19.c:22)
==2391801==    by 0x109271: main (c19.c:28)
==2391801==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2391801==
==2391801==
==2391801== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2391801==  Access not within mapped region at address 0x0
==2391801==    at 0x484BB23: memmove (vg_replace_strmem.c:1398)
==2391801==    by 0x48CD828: __printf_buffer_write (Xprintf_buffer_write.c:39)
==2391801==    by 0x48D5349: __printf_buffer (vfprintf-internal.c:647)
==2391801==    by 0x48F08C1: __vsprintf_internal (iovsprintf.c:62)
==2391801==    by 0x48D2914: sprintf (sprintf.c:30)
==2391801==    by 0x10923D: printSum (c19.c:22)
==2391801==    by 0x109271: main (c19.c:28)
==2391801==  If you believe this happened as a result of a stack
==2391801==  overflow in your program's main thread (unlikely but
==2391801==  possible), you can try to increase the size of the
==2391801==  main thread stack using the --main-stacksize= flag.
==2391801==  The main thread stack size used in this run was 8388608.
==2391801==
==2391801== HEAP SUMMARY:
==2391801==     in use at exit: 2,048 bytes in 2 blocks
==2391801==   total heap usage: 2 allocs, 0 frees, 2,048 bytes allocated
==2391801==
==2391801== LEAK SUMMARY:
==2391801==    definitely lost: 0 bytes in 0 blocks
==2391801==    indirectly lost: 0 bytes in 0 blocks
==2391801==      possibly lost: 0 bytes in 0 blocks
==2391801==    still reachable: 2,048 bytes in 2 blocks
==2391801==         suppressed: 0 bytes in 0 blocks
==2391801== Reachable blocks (those to which a pointer was found) are not shown.
==2391801== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2391801==
==2391801== For lists of detected and suppressed errors, rerun with: -s
==2391801== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)
[1]    2391801 segmentation fault (core dumped)  valgrind --leak-check=full ./a.out

1. array buf sendo criado fora do escopo da função onde ele é utilizado (printSum)
2. havia a tentativa de utilizar o array dinâmico 'buf' antes de alocar espaço para ele
3. a função strtok retornava a string 'line' fatiada, mas isso não era atribuido a nenhuma variavel
4. a funçao sum_to_n poderia ser mais eficiente caso utilizasse a formula de Gauss para calcular a soma dos 'num' primeiros números naturais

Após as modificações, a saída do valgrind foi a seguinte:

==3179182== Memcheck, a memory error detector
==3179182== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==3179182== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==3179182== Command: ./a.out
==3179182==
enter a number:
99999999999999999
sum=499999999500000000
==3179182==
==3179182== HEAP SUMMARY:
==3179182==     in use at exit: 0 bytes in 0 blocks
==3179182==   total heap usage: 3 allocs, 3 frees, 2,071 bytes allocated
==3179182==
==3179182== All heap blocks were freed -- no leaks are possible
==3179182==
==3179182== For lists of detected and suppressed errors, rerun with: -s
==3179182== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
